function awsume {
    trypipe {
        awsumepy: @{ $ARGS->@[1..]n } -> set generic envs
        
        switch $envs[:0] {
            case "Awsume" {
                unset AWS_ACCESS_KEY_ID
                unset AWS_SECRET_ACCESS_KEY
                unset AWS_SESSION_TOKEN
                unset AWS_REGION
                unset AWS_DEFAULT_REGION
                unset AWS_PROFILE
                unset AWS_DEFAULT_PROFILE
                unset AWSUME_EXPIRATION
                unset AWSUME_PROFILE
                unset AWSUME_COMMAND

                export AWS_ACCESS_KEY_ID=$envs[:1]
                export AWS_SECRET_ACCESS_KEY=$envs[:2]
                export AWS_SESSION_TOKEN=$envs[:3]
                export AWS_REGION=$envs[:4]
                export AWS_DEFAULT_REGION=$envs[:4]
                export AWSUME_PROFILE=$envs[:5]
                export AWS_PROFILE=$envs[:6]
                export AWS_DEFAULT_PROFILE=$envs[:6]
                export AWSUME_EXPIRATION=$envs[:7]
            }

            catch {
                err: "Something went wrong!"
            }
        }
    }
}

alias awscon=awsume

private autocomplete.asumepy {
    awsumepy: -h -> @[optional arguments:..]s -> tabulate: --map --column-wraps --split-comma --key-inc-hint
}

test unit private autocomplete.asumepy {
    "StdoutType": "json",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    }),
    "StdoutIsMap": true
}

private autocomplete.awscon {
    trypipe {
        open terraform.tfvars -> [ aws_account_id ] -> set accid
        grep $accid ~/.aws/config -n -> regexp 'f/(^[0-9]+)' -> set int line
        let line=line-3
        cat ~/.aws/config -> @[$line..$line]n -> regexp 'f/^\[profile (.*?)\]/'
    }; catch {
        cat ~/.aws/config -> regexp 'f/^\[profile (.*?)\]/' -> sort
    }
}

test unit private autocomplete.awscon {
    "StdoutType": "*",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    }),
    "StdoutIsArray": true
}

autocomplete set awsume { [
    {
        "DynamicDesc": ({ autocomplete.asumepy }),
        "Optional": true
    },
    {
        "Dynamic": ({ autocomplete.awscon })
    }
] }

autocomplete get awsume -> autocomplete set awscon