function terraform-get {
    # Download and install a preferred version of Terraform. Params: [0-9]+\.[0-9]+
   
    trypipe {
        $ARGS[1] -> set ver
        getfile https://releases.hashicorp.com/terraform/0.$ver/terraform_0.${$ver}_${os}_${cpuarch}.zip ->> $DEVOPSVERSIONED/deleteme.zip
        unzip $DEVOPSVERSIONED/deleteme.zip -d $DEVOPSVERSIONED
        mv -i $DEVOPSVERSIONED/terraform $DEVOPSVERSIONED/terraform_0.$ver
        rm $DEVOPSVERSIONED/deleteme.zip
        #ls -l @{g $DEVOPSVERSIONED/terraform_*}

        terraform-switch $ver
    }
    catch {
        err "Something went wrong. You haven't been switched to $ARGS[1]"
    }
}

function terraform-switch {
    # Switches Terraform binary versions (used when switching between older and newer Terraform states/scripts)

    test define version {
        "StdoutRegex": "[0-9]+\\.[0-9]+",
        "ExitNum": 0
    }

    test define tfverexists {
        "ExitNum": 0
    }

    test define tfexists {
        "ExitNum": 0
    }

    test define symlink {
        "StderrRegex": "^$",
        "ExitNum": 0
    }

    test define unlink {
        "ExitNum": 0
    }

    trypipe {
        $ARGS -> [ <test_version> 1 ] -> set ver

        if {g: <test_tfverexists> $DEVOPSVERSIONED/terraform_0.$ver} then {
            if {g: <test_tfexists> $DEVOPSBIN/terraform} then { unlink <!null> <test_unlink> $DEVOPSBIN/terraform } 
            ln <test_symlink> -sv $DEVOPSVERSIONED/terraform_0.$ver $DEVOPSBIN/terraform
            murex-update-exe-list
        } else {
            err "That version doesn't exist. If version number is not a typo then please use `terraform-get` to download it."
        }
    }
}

autocomplete set terraform-switch { [{
    "Dynamic": ({ g $DEVOPSVERSIONED/terraform_0.* -> regexp 'f/terraform_0\.([0-9]+\.[0-9]+)$/' -> format str -> sort -Vr })
}] }


#function workspace {
#    # Initializes the Terraform workspace
#    try {
#        out "{YELLOW}Checking AWS session token...{RESET}"
#        and { $AWS_SESSION_TOKEN } { $AWS_SESSION_EXPIRATION } { = ((${date -d $AWS_SESSION_EXPIRATION +%s}-${date +%s})/60) > 10 }
#        #err "Please rerun `awscon`"
#        #return 1
#        
#        out "{YELLOW}Checking SSH agent...{RESET}"
#        if { $SSH_AGENT_PID } else {
#            agent
#        }
#
#        out "{YELLOW}Initializing Terraform...{RESET}"
#        terraform: init
#
#        out "{YELLOW}Selecting workspace '$USER'...{RESET}"
#        if { terraform: workspace new $USER } else {
#            terraform: workspace select $USER
#        }
#
#    }; catch {
#        err "Failed to initialize you workspace"
#    }
#}


function env-tf {
    # Sets some lazy shortcut functions for working with Terraform

    function init {
        # Remove existing .terraform directory and run `terraform init`
        rm -rf .terraform
        terraform init
    }

    function plan {
        # Runs a Terraform plan. -c / --clean to remove .terraform directory and plan from a clean init
        try {
            args args {
                "AllowAdditional": false,
                "Flags": {
                    "--clean": "bool",
                    "-c": "--clean"
                }
            }

            if { $args[Flags]->[--clean] } then {
                init
 
            } else {
                terraform get
            }
        
            terraform plan
        }
    }

    autocomplete set plan { [{
        "Flags": [ "--clean" ]
    }] }

    function apply {
        # Runs a Terraform get to sync modules before applying the config
        terraform get
        terraform apply
    }
}
